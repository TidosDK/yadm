- hosts: localhost
  name: Install packages
  connection: local
  become: true

  vars_files:
    - vars/packages.json

  vars:
    docker_arch_map:
      x86_64: amd64
      aarch64: arm64
      armv7l: armhf
      armv6l: armhf
      ppc64le: ppc64el
      s390x: s390x
    docker_deb_arch: "{{ docker_arch_map.get(ansible_architecture, 'amd64') }}"
    docker_repo_codename: "{{ ansible_distribution_release }}"
    docker_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin

  pre_tasks:
    - name: Ensure repo tooling is present
      ansible.builtin.apt:
        name:
          - software-properties-common   # provides add-apt-repository
          - gnupg
          - ca-certificates
          - curl
          - apt-transport-https
          - lsb-release
        state: present
        update_cache: true
        cache_valid_time: 3600

    - name: Refresh APT cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Upgrade installed packages (no removals)
      ansible.builtin.apt:
        upgrade: yes   # use "dist" for full/Kernel upgrades that may add/remove packages
      when: apt_do_upgrade | default(true)
      tags: [apt-upgrade]


  tasks:
    # Install APT packages
    - name: Ensure PPAs present
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
        state: present
      loop: "{{ apt_ppas | default([]) }}"

    - name: Install APT packages
      ansible.builtin.apt:
        name: "{{ apt_packages }}"
        state: present
        update_cache: true
        cache_valid_time: 3600

    # Install docker
    - name: Remove conflicting distro Docker packages
      ansible.builtin.apt:
        name:
          - docker.io
          - docker-doc
          - podman-docker
          - containerd
          - runc
        state: absent
      when: docker_install | default(false)
      tags: [docker]

    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: docker_install | default(false)
      tags: [docker]

    - name: Download Docker GPG key (ASCII)
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
      when: docker_install | default(false)
      tags: [docker]

    - name: Convert Docker key to GPG dearmored keyring
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.gpg
      when: docker_install | default(false)
      tags: [docker]

    - name: Set permissions on Docker keyring
      ansible.builtin.file:
        path: /etc/apt/keyrings/docker.gpg
        mode: '0644'
      when: docker_install | default(false)
      tags: [docker]

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ docker_deb_arch }} signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu {{ docker_repo_codename }} stable
        filename: docker
        state: present
      when: docker_install | default(false)
      tags: [docker]

    - name: Install Docker engine and plugins
      ansible.builtin.apt:
        name: "{{ docker_packages }}"
        state: present
        update_cache: true
      when: docker_install | default(false)
      tags: [docker]

    - name: Enable and start Docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true
      when: docker_install | default(false)
      tags: [docker]

    - name: Ensure users are in the docker group
      ansible.builtin.user:
        name: "{{ item }}"
        groups: docker
        append: true
      loop: "{{ docker_users | default([]) }}"
      when: docker_install | default(false)
      tags: [docker]

    # Install Cloudflared
    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: cloudflared_install | default(false)
      tags: [cloudflared]

    - name: Download Cloudflare GPG key
      ansible.builtin.get_url:
        url: https://pkg.cloudflare.com/cloudflare-main.gpg
        dest: /etc/apt/keyrings/cloudflare-main.gpg
        mode: '0644'
      when: cloudflared_install | default(false)
      tags: [cloudflared]

    - name: Add Cloudflared APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared {{ ansible_distribution_release | lower }} main"
        filename: cloudflared
        state: present
      when: cloudflared_install | default(false)
      tags: [cloudflared]

    - name: Install cloudflared
      ansible.builtin.apt:
        name: cloudflared
        state: present
        update_cache: true
      when: cloudflared_install | default(false)
      tags: [cloudflared]

      # Install Tailscale
    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: tailscale_install | default(false)
      tags: [tailscale]

    - name: Download Tailscale GPG key
      ansible.builtin.get_url:
        url: https://pkgs.tailscale.com/stable/ubuntu/noble.noarmor.gpg
        dest: /etc/apt/keyrings/tailscale-archive-keyring.gpg
        mode: '0644'
      when: tailscale_install | default(false)
      tags: [tailscale]

    - name: Download Tailscale APT source list
      ansible.builtin.get_url:
        url: https://pkgs.tailscale.com/stable/ubuntu/noble.tailscale-keyring.list
        dest: /etc/apt/sources.list.d/tailscale.list
        mode: '0644'
      when: tailscale_install | default(false)
      tags: [tailscale]

    - name: Install tailscale
      ansible.builtin.apt:
        name: tailscale
        state: present
        update_cache: true
      when: tailscale_install | default(false)
      tags: [tailscale]

      # Install Terraform
    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: terraform_install | default(false)
      tags: [terraform]

    - name: Download HashiCorp GPG key
      ansible.builtin.get_url:
        url: https://apt.releases.hashicorp.com/gpg
        dest: /etc/apt/keyrings/hashicorp-archive-keyring.asc
        mode: '0644'
      when: terraform_install | default(false)
      tags: [terraform]

    - name: Convert HashiCorp GPG key to dearmored format
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/hashicorp-archive-keyring.gpg /etc/apt/keyrings/hashicorp-archive-keyring.asc
      args:
        creates: /etc/apt/keyrings/hashicorp-archive-keyring.gpg
      when: terraform_install | default(false)
      tags: [terraform]

    - name: Add HashiCorp APT repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release | lower }} main
        filename: hashicorp
        state: present
      when: terraform_install | default(false)
      tags: [terraform]

    - name: Install terraform
      ansible.builtin.apt:
        name: terraform
        state: present
        update_cache: true
      when: terraform_install | default(false)
      tags: [terraform]

      # Install Helm
    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: helm_install | default(false)
      tags: [helm]

    - name: Download Helm GPG key
      ansible.builtin.get_url:
        url: https://baltocdn.com/helm/signing.asc
        dest: /etc/apt/keyrings/helm.asc
        mode: '0644'
      when: helm_install | default(false)
      tags: [helm]

    - name: Convert Helm GPG key to dearmored keyring
      ansible.builtin.command:
        cmd: gpg --dearmor -o /etc/apt/keyrings/helm.gpg /etc/apt/keyrings/helm.asc
      args:
        creates: /etc/apt/keyrings/helm.gpg
      when: helm_install | default(false)
      tags: [helm]

    - name: Add Helm APT repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ ansible_architecture }} signed-by=/etc/apt/keyrings/helm.gpg]
          https://baltocdn.com/helm/stable/debian/ all main
        filename: helm
        state: present
      when: helm_install | default(false)
      tags: [helm]

    - name: Install Helm
      ansible.builtin.apt:
        name: helm
        state: present
        update_cache: true
      when: helm_install | default(false)
      tags: [helm]

    - name: Check if a reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Read list of packages that triggered the reboot requirement
      ansible.builtin.slurp:
        src: /var/run/reboot-required.pkgs
      register: reboot_pkgs
      when: reboot_required.stat.exists
      no_log: true  # file may not exist; hide noisy output

    - name: Notify user to reboot (with details if available)
      ansible.builtin.debug:
        msg: >-
          A reboot is required. Packages:
          {{
            (reboot_pkgs.content | default('') | b64decode | trim | split('\n'))
            if reboot_pkgs is defined else
            'not specified by the system'
          }}
      when: reboot_required.stat.exists
